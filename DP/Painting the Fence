```
Given a fence with n posts and k colors, find out the number of ways of painting the fence so that not more than two consecutive posts have the same colors
```

```
    int add( int a , int b ){
        return( a%M + b%M )%M;
    }
    
    int mul(int a, int b) {
    return (1LL * a % M * b % M) % M;
    }
    
    int solve( int n , int k , vector<int> &dp ){
        
        if( n == 1 )
            return k;
            
            
        if( n == 2 )
            return add( k , k*(k-1) );
        
        if( dp[n] != -1 )
            return dp[n];
            
        dp[n] = add( ( mul( solve( n-2 , k , dp ) , k-1 )  ) , ( mul( solve( n-1 , k , dp ) , k-1 )  ) );
        return dp[n];
    }
    
    int solveTab( int n , int k  ){
        
        vector<int> dp(n+1 , 0 );
        dp[1] = k;
        dp[2] = add( k , mul( k , k-1 ));
        
        for( int i=3 ; i<=n ; i++ ){
            dp[i] = add( ( mul( dp[i-2] , k-1 )  ) , ( mul( dp[i-1] , k-1 )  ) );
        }
        
        return dp[n];
    }
    
    long long countWays(int n, int k){
        // vector<int> dp( n+1 , -1 );
        // long long  ans =  solve( n , k , dp );
        // return ans;
        
        int ans = solveTab(  n ,  k );
        return ans;
    }
```
